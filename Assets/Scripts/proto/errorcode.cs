// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/errorcode.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Errorcode {

  /// <summary>Holder for reflection information generated from proto/errorcode.proto</summary>
  public static partial class ErrorcodeReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/errorcode.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ErrorcodeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVwcm90by9lcnJvcmNvZGUucHJvdG8SD3Byb3RvLmVycm9yY29kZSJAChFF",
            "cnJvckNvZGVSZXNwb25zZRILCgNjbWQYASACKAUSDAoEdHlwZRgCIAIoBRIQ",
            "CghwYXJhbUludBgDIAEoBSrWFwoNRXJyb3JDb2RlVHlwZRIGCgJPSxAAEhAK",
            "DFNFUlZFUl9FUlJPUhAyEhcKE1NFUlZFUl9DT05GSUdfRVJST1IQMxIQCgxD",
            "T01NT05fRVJST1IQNBIUChBTRVJWRVJfTk9UX1JFQURZEDUSEwoPU0VSVkVS",
            "X05PVF9PUEVOEDYSDwoLVE9LRU5fRVJST1IQNxIMCghUSU1FX09VVBA4EhEK",
            "DVVzZXJOYW1lRXJyb3IQZBIRCg1JdGVtTm90RW5vdWdoEGUSFQoRQ3VycmVu",
            "Y3lOb3RFbm91Z2gQZhIUChBCdXlQb3dlck1heFRpbWVzEGcSDQoJRGF0YUVy",
            "cm9yEGgSFgoSVXNlck5hbWVSZXBldGl0aW9uEGkSDwoLQ3JlYXRlZFJvbGUQ",
            "ahIUChBEb05vdEhhdmVDYXJyaWVyEGsSEwoPRmxhZ0Jhc2VNYXBMb2NrEGwS",
            "EgoORmxhZ0VtYmxlbUxvY2sQbRIRCg1GbGFnTmFtZUVycm9yEG4SEgoORmxh",
            "Z0NvbG9yRXJyb3IQbxIVChFIb21lQmFzZU5hbWVFcnJvchBwEhMKD0Z1bmN0",
            "aW9uTm90T3BlbhBxEhcKE0FMUkVBRFlfQ1JFQVRFX1JPTEUQchIICgNCYW4Q",
            "yQESDgoJU0lEX0VSUk9SEMoBEhYKEUZDTV9OT1dfRk9SQklEREVOEMsBEhIK",
            "DURvTm90SGF2ZUl0ZW0Q+gESEgoNSXRlbUNhbm5vdFVzZRD7ARITCg5JdGVt",
            "QW1vdW50TGVzcxD8ARIUCg9JdGVtQW1vdW50RXJyb3IQ/QESEwoOSXRlbUNh",
            "bm5vdFNlbGwQ/gESEAoLSXRlbUlkRXJyb3IQ/wESGAoTSXRlbUFtb3VudE92",
            "ZXJMaW1pdBCAAhIUCg9HZW5lcmFsTGV2ZWxFcnIQrQISFQoQRG9Ob3RIYXZl",
            "R2VuZXJhbBCuAhIbChZHZW5lcmFsQWxyZWFkeU1heExldmVsEK8CEhMKDkdl",
            "bmVyYWxJREVycm9yELACEhoKFUdlbmVyYWxBbHJlYWR5TWF4U3RhchCxAhIb",
            "ChZHZW5lcmFsTm90U3Rhck1heExldmVsELICEhcKEkdlbmVyYWxBbHJlYWR5",
            "SGF2ZRCzAhIRCgxHZW5lcmFsSXNOcGMQtAISIwoeR0VORVJBTF9BQ1RJVkVf",
            "SVRFTV9OT1RfRU5PVUdIELUCEhAKC1Bvd2VyRW5vdWdoEJEDEhgKE05vQ29t",
            "cGxldGVCZWZvcmVNYXAQkgMSEwoOTWlzc2lvbklkRXJyb3IQkwMSEQoMTm90",
            "SW5NaXNzaW9uEJQDEhgKE01pc3Npb25IYXNDb21wbGV0ZWQQlQMSEwoOQ2hh",
            "cHRlck5vdE9wZW4QlgMSEwoOQ2hhcHRlcklkRXJyb3IQlwMSFwoSQ2hhcHRl",
            "ckJveFJlY2VpdmVkEJgDEhcKEkNoYXB0ZXJOb3RPY2N1cGllZBCZAxIYChND",
            "aGFwdGVyVGF4VGltZUVycm9yEJoDEhkKFENoYXB0ZXJBbHJlYWR5VW5sb2Nr",
            "EJsDEhgKE0NoYXB0ZXJDYW5ub3RVbmxvY2sQnAMSGAoTR2VuZXJhbEV2ZW50",
            "SWRFcnJvchCdAxIYChNDaGFwdGVySXNSZWJlbGxpb3VzEJ4DEhYKEUNoYXB0",
            "ZXJUYXhOb3RGcmVlEJ8DEhwKF0NoYXB0ZXJUYXhSZWFjaE1heFRpbWVzEKAD",
            "EhQKD1NvbGRpZXJMZXZlbEVychCkAxITCg5Tb2xkaWVySURFcnJvchClAxIV",
            "ChBEb05vdEhhdmVTb2xkaWVyEKYDEhoKFVNvbGRpZXJBbHJlYWR5TWF4U3Rh",
            "chCnAxIbChZTb2xkaWVyTm90U3Rhck1heExldmVsEKgDEh8KGlNvbGRpZXJN",
            "YXRyaXhBbHJlYWR5QWN0aXZlEKkDEhkKFFNvbGRpZXJNYXRyaXhJZEVycm9y",
            "EKoDEiAKG1NvbGRpZXJNYXRyaXhDb25kaXRpb25FcnJvchCrAxIWChFTdHJh",
            "dGFnZW1MZXZlbEVychCuAxIUCg9GcmllbmRNYXhBbW91bnQQuAMSDQoISXNG",
            "cmllbmQQuQMSEgoNRnJpZW5kQXBwbGllZBC6AxIQCgtOb0ZvdW5kUm9sZRC7",
            "AxIWChFNYXhTZW5kUG93ZXJUaW1lcxC8AxIOCglUb2RheVNlbmQQvQMSFQoQ",
            "TWF4R2V0UG93ZXJUaW1lcxC+AxIXChJUYXJnZXRCZUFwcGx5SXNNYXgQvwMS",
            "GgoVVGFyZ2V0RnJpZW5kTWF4QW1vdW50EMADEhIKDUxlYWd1ZU5hbWVFcnIQ",
            "wgMSEgoNTGVhZ3VlQ29udGV4dBDDAxIZChRMZWFndWVOYW1lUmVwZXRpdGlv",
            "bhDEAxIYChNBcmVuYVNjZW5lSW5pdEVycm9yEMwDEgwKB0Nka1VzZWQQ1gMS",
            "DQoIQ2RrRXJyb3IQ1wMSCgoFT3RoZXIQ4AMSFQoQUmVwZWF0RW50ZXJTY2Vu",
            "ZRDhAxIOCglUb2tlbk51bGwQ4gMSEQoMVG9rZW5PdmVyZHVlEOQDEhEKDE5v",
            "QmF0dGxlRGF0YRDlAxIYChNGaWdodFNlcnZlclVuT25saW5lEOYDEg8KCkNo",
            "YXRUb0xvbmcQpgQSEgoNQ2hhbk1zZ0Vycm9yMRCnBBISCg1DaGFuTXNnRXJy",
            "b3IyEKgEEg8KCk5vdEluTWF0Y2gQsAQSEQoMTm9QYXRyb2xUYXNrEMQEEhoK",
            "FVBhdHJvbFRhc2tJc092ZXJTdGFydBDFBBIdChhQYXRyb2xUYXNrVXNlZENh",
            "cmRzRXJyb3IQxgQSFwoSUGF0cm9sVGFza05lZWRUaW1lEMcEEh8KGlBhdHJv",
            "bFRhc2tBbHJlYWR5R2V0UmV3YXJkEMgEEiEKHFBhdHJvbFN0b3JlQnV5Q29u",
            "ZGl0aW9uRXJyb3IQyQQSHAoXUGF0cm9sU3RvcmVCdXlUaW1lc0xlc3MQygQS",
            "HQoYUGF0cm9sU3RvcmVOb3RoaW5nVW5sb2NrEMsEEh8KGlBhdHJvbFJlZnJl",
            "c2hUaW1lc1JlYWNoTWF4EMwEEhoKFVBhdHJvbFN0b3JlTm9UaGVHb29kcxDN",
            "BBIgChtQYXRyb2xTdG9yZUdvb2RzQWxyZWFkeUxvY2sQzgQSHAoXUGF0cm9s",
            "U3RvcmVHb29kc05vdExvY2sQzwQSHQoYVGF2ZXJuU3RyYXRlZ2ljc01heFRp",
            "bWVzENgEEg4KCU5vdEZyaWVuZBDiBBIZChRIYXJib3JEb05vdEhhdmVHb29k",
            "cxDjBBIZChRIYXJib3JHb29kc0NvdW50TGVzcxDkBBIcChdIYXJib3JDb3Vu",
            "dE92ZXJsb2FkQm9hdBDlBBIaChVIYXJib3JGcmllbmRDb3VudExlc3MQ5gQS",
            "GAoTSGFyYm9yTm9UaGVTaGlwU2tpbhDnBBIUCg9IYXJib3JOb1RoZVNhaWwQ",
            "6AQSHAoXSGFyYm9yU2FpbE5vTmVlZFNwZWVkVXAQ6QQSFwoSSGFyYm9yU2Fp",
            "bFRpbWVMZXNzEOoEEhgKE1RlY2hub2xvZ3lUeXBlRXJyb3IQ9gQSFwoSVGVj",
            "aG5vbG9neU1heExldmVsEPcEEh0KGFRlY2hub2xvZ3lDb25kaXRpb25FcnJv",
            "chD4BBITCg5Ob1RoZUNhcmRHcm91cBCABRIiCh1NYXRjaFB2UFJlY29yZE5v",
            "Q2FyZEdyb3VwSW5mbxCBBRIdChhTcGVjaWFsVGFza0NvbmZpZ0lkRXJyb3IQ",
            "igUSGQoUU3BlY2lhbFRhc2tOb3RBY2NlcHQQiwUSIwoeU3BlY2lhbFRhc2tU",
            "b2RheU1heEFjY2VwdFRpbWVzEIwFEh8KGlNwZWNpYWxUYXNrQ2Fubm90R2V0",
            "UmV3YXJkEI0FEh0KGFNwZWNpYWxUYXNrQWxyZWFkeUFjY2VwdBCOBRIaChVT",
            "cGVjaWFsVGFza05vdFRpbWVvdXQQjwUSGQoUU3BlY2lhbFRhc2tOb1RoZVRh",
            "c2sQkAUSGwoWU3BlY2lhbFRhc2tDYW5ub3RGbHVzaBCRBQ=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.Errorcode.ErrorCodeType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Errorcode.ErrorCodeResponse), global::Proto.Errorcode.ErrorCodeResponse.Parser, new[]{ "Cmd", "Type", "ParamInt" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ErrorCodeType {
    /// <summary>
    /// 表示没有错误
    /// </summary>
    [pbr::OriginalName("OK")] Ok = 0,
    /// <summary>
    /// 服务器内部错误
    /// </summary>
    [pbr::OriginalName("SERVER_ERROR")] ServerError = 50,
    /// <summary>
    /// 服务器配置有误
    /// </summary>
    [pbr::OriginalName("SERVER_CONFIG_ERROR")] ServerConfigError = 51,
    /// <summary>
    /// 常规错误， 请稍后重试
    /// </summary>
    [pbr::OriginalName("COMMON_ERROR")] CommonError = 52,
    /// <summary>
    /// 服务器没有准备好 ，可能是因为网关没有成功连接到后面服务器
    /// </summary>
    [pbr::OriginalName("SERVER_NOT_READY")] ServerNotReady = 53,
    /// <summary>
    /// 服务器没有开放 | 因为开服时间的问题
    /// </summary>
    [pbr::OriginalName("SERVER_NOT_OPEN")] ServerNotOpen = 54,
    /// <summary>
    /// 登录网关时，token错误
    /// </summary>
    [pbr::OriginalName("TOKEN_ERROR")] TokenError = 55,
    /// <summary>
    /// 超时，请待会再试
    /// </summary>
    [pbr::OriginalName("TIME_OUT")] TimeOut = 56,
    /// <summary>
    ///创建角色出错了，角色名密码为空，非法字符，太长等
    /// </summary>
    [pbr::OriginalName("UserNameError")] UserNameError = 100,
    /// <summary>
    ///道具不足
    /// </summary>
    [pbr::OriginalName("ItemNotEnough")] ItemNotEnough = 101,
    /// <summary>
    ///货币不足
    /// </summary>
    [pbr::OriginalName("CurrencyNotEnough")] CurrencyNotEnough = 102,
    /// <summary>
    ///购买体力达到最大次数
    /// </summary>
    [pbr::OriginalName("BuyPowerMaxTimes")] BuyPowerMaxTimes = 103,
    /// <summary>
    ///配置错误
    /// </summary>
    [pbr::OriginalName("DataError")] DataError = 104,
    /// <summary>
    ///重复
    /// </summary>
    [pbr::OriginalName("UserNameRepetition")] UserNameRepetition = 105,
    /// <summary>
    /// 需要创角
    /// </summary>
    [pbr::OriginalName("CreatedRole")] CreatedRole = 106,
    /// <summary>
    /// 当前玩家并没有这个载具
    /// </summary>
    [pbr::OriginalName("DoNotHaveCarrier")] DoNotHaveCarrier = 107,
    /// <summary>
    /// 旗帜的 底图 没解锁
    /// </summary>
    [pbr::OriginalName("FlagBaseMapLock")] FlagBaseMapLock = 108,
    /// <summary>
    /// 旗帜的 纹章 没解锁
    /// </summary>
    [pbr::OriginalName("FlagEmblemLock")] FlagEmblemLock = 109,
    /// <summary>
    /// 旗帜的名字有问题
    /// </summary>
    [pbr::OriginalName("FlagNameError")] FlagNameError = 110,
    /// <summary>
    /// 旗帜选择的 颜色有问题
    /// </summary>
    [pbr::OriginalName("FlagColorError")] FlagColorError = 111,
    /// <summary>
    /// 主基地的名字 有问题， 应该是屏蔽字
    /// </summary>
    [pbr::OriginalName("HomeBaseNameError")] HomeBaseNameError = 112,
    /// <summary>
    /// 功能未开放
    /// </summary>
    [pbr::OriginalName("FunctionNotOpen")] FunctionNotOpen = 113,
    /// <summary>
    /// 用户在该区已经创角
    /// </summary>
    [pbr::OriginalName("ALREADY_CREATE_ROLE")] AlreadyCreateRole = 114,
    /// <summary>
    /// 目前处于封号状态
    /// </summary>
    [pbr::OriginalName("Ban")] Ban = 201,
    /// <summary>
    /// sid 和服务器的不一致
    /// </summary>
    [pbr::OriginalName("SID_ERROR")] SidError = 202,
    /// <summary>
    /// 防成谜用户现在禁止登录
    /// </summary>
    [pbr::OriginalName("FCM_NOW_FORBIDDEN")] FcmNowForbidden = 203,
    /// <summary>
    /// 道具 250~274
    /// </summary>
    [pbr::OriginalName("DoNotHaveItem")] DoNotHaveItem = 250,
    /// <summary>
    /// 道具无法使用
    /// </summary>
    [pbr::OriginalName("ItemCannotUse")] ItemCannotUse = 251,
    /// <summary>
    /// 道具数量不足
    /// </summary>
    [pbr::OriginalName("ItemAmountLess")] ItemAmountLess = 252,
    /// <summary>
    /// 道具数量有误
    /// </summary>
    [pbr::OriginalName("ItemAmountError")] ItemAmountError = 253,
    /// <summary>
    /// 这个道具无法售卖
    /// </summary>
    [pbr::OriginalName("ItemCannotSell")] ItemCannotSell = 254,
    /// <summary>
    /// 道具ID 有误
    /// </summary>
    [pbr::OriginalName("ItemIdError")] ItemIdError = 255,
    /// <summary>
    /// 无法添加道具， 道具数量超出上限
    /// </summary>
    [pbr::OriginalName("ItemAmountOverLimit")] ItemAmountOverLimit = 256,
    /// <summary>
    ///武将
    /// </summary>
    [pbr::OriginalName("GeneralLevelErr")] GeneralLevelErr = 301,
    /// <summary>
    /// 没有拥有这个武将
    /// </summary>
    [pbr::OriginalName("DoNotHaveGeneral")] DoNotHaveGeneral = 302,
    /// <summary>
    ///  武将已经到达了最高等级
    /// </summary>
    [pbr::OriginalName("GeneralAlreadyMaxLevel")] GeneralAlreadyMaxLevel = 303,
    /// <summary>
    /// 武将的ID 有误
    /// </summary>
    [pbr::OriginalName("GeneralIDError")] GeneralIderror = 304,
    /// <summary>
    /// 武将已经达到了 最高的星级
    /// </summary>
    [pbr::OriginalName("GeneralAlreadyMaxStar")] GeneralAlreadyMaxStar = 305,
    /// <summary>
    /// 武将没有到达 可以升星的等级
    /// </summary>
    [pbr::OriginalName("GeneralNotStarMaxLevel")] GeneralNotStarMaxLevel = 306,
    /// <summary>
    /// 已经有这个武将了
    /// </summary>
    [pbr::OriginalName("GeneralAlreadyHave")] GeneralAlreadyHave = 307,
    /// <summary>
    /// 想要获取/激活的武将是一个NPC
    /// </summary>
    [pbr::OriginalName("GeneralIsNpc")] GeneralIsNpc = 308,
    /// <summary>
    /// 武将激活道具不够
    /// </summary>
    [pbr::OriginalName("GENERAL_ACTIVE_ITEM_NOT_ENOUGH")] GeneralActiveItemNotEnough = 309,
    /// <summary>
    ///战斗  401 ~ 419
    /// </summary>
    [pbr::OriginalName("PowerEnough")] PowerEnough = 401,
    /// <summary>
    ///没有通关前一关卡
    /// </summary>
    [pbr::OriginalName("NoCompleteBeforeMap")] NoCompleteBeforeMap = 402,
    /// <summary>
    /// 请求的关卡id有误
    /// </summary>
    [pbr::OriginalName("MissionIdError")] MissionIdError = 403,
    /// <summary>
    /// 当前没有在任何一个关卡中
    /// </summary>
    [pbr::OriginalName("NotInMission")] NotInMission = 404,
    /// <summary>
    /// 该关卡已经完成了
    /// </summary>
    [pbr::OriginalName("MissionHasCompleted")] MissionHasCompleted = 405,
    /// <summary>
    /// 该章节 未开启
    /// </summary>
    [pbr::OriginalName("ChapterNotOpen")] ChapterNotOpen = 406,
    /// <summary>
    /// 选取的章节 有误
    /// </summary>
    [pbr::OriginalName("ChapterIdError")] ChapterIdError = 407,
    /// <summary>
    /// 该章节的奖励已经领取过了
    /// </summary>
    [pbr::OriginalName("ChapterBoxReceived")] ChapterBoxReceived = 408,
    /// <summary>
    /// 章节并没有被 占领
    /// </summary>
    [pbr::OriginalName("ChapterNotOccupied")] ChapterNotOccupied = 409,
    /// <summary>
    /// 没有到达最小的可收税时间
    /// </summary>
    [pbr::OriginalName("ChapterTaxTimeError")] ChapterTaxTimeError = 410,
    /// <summary>
    /// 据点已经解锁了
    /// </summary>
    [pbr::OriginalName("ChapterAlreadyUnlock")] ChapterAlreadyUnlock = 411,
    /// <summary>
    /// 条件不足， 无法解锁该据点
    /// </summary>
    [pbr::OriginalName("ChapterCannotUnlock")] ChapterCannotUnlock = 412,
    /// <summary>
    /// 英雄拜访的事件 id 有误 | 条件不足 无法领取
    /// </summary>
    [pbr::OriginalName("GeneralEventIdError")] GeneralEventIdError = 413,
    /// <summary>
    /// 据点已经反叛
    /// </summary>
    [pbr::OriginalName("ChapterIsRebellious")] ChapterIsRebellious = 414,
    /// <summary>
    /// 据点收税 并不免费
    /// </summary>
    [pbr::OriginalName("ChapterTaxNotFree")] ChapterTaxNotFree = 415,
    /// <summary>
    /// 额外收税到达了最大次数， 无法继续收税
    /// </summary>
    [pbr::OriginalName("ChapterTaxReachMaxTimes")] ChapterTaxReachMaxTimes = 416,
    /// <summary>
    ///士兵
    /// </summary>
    [pbr::OriginalName("SoldierLevelErr")] SoldierLevelErr = 420,
    /// <summary>
    /// 士兵的ID 有误
    /// </summary>
    [pbr::OriginalName("SoldierIDError")] SoldierIderror = 421,
    /// <summary>
    /// 玩家没有这个士兵
    /// </summary>
    [pbr::OriginalName("DoNotHaveSoldier")] DoNotHaveSoldier = 422,
    /// <summary>
    /// 这个士兵已经到达了最大的等级
    /// </summary>
    [pbr::OriginalName("SoldierAlreadyMaxStar")] SoldierAlreadyMaxStar = 423,
    /// <summary>
    /// 这个士兵没有到达升星的条件等级
    /// </summary>
    [pbr::OriginalName("SoldierNotStarMaxLevel")] SoldierNotStarMaxLevel = 424,
    /// <summary>
    /// 军阵已经被激活过了
    /// </summary>
    [pbr::OriginalName("SoldierMatrixAlreadyActive")] SoldierMatrixAlreadyActive = 425,
    /// <summary>
    /// 军阵的配置id 有误
    /// </summary>
    [pbr::OriginalName("SoldierMatrixIdError")] SoldierMatrixIdError = 426,
    /// <summary>
    /// 激活军阵的条件不足
    /// </summary>
    [pbr::OriginalName("SoldierMatrixConditionError")] SoldierMatrixConditionError = 427,
    /// <summary>
    ///计谋
    /// </summary>
    [pbr::OriginalName("StratagemLevelErr")] StratagemLevelErr = 430,
    /// <summary>
    ///好友  440 ~ 449
    /// </summary>
    [pbr::OriginalName("FriendMaxAmount")] FriendMaxAmount = 440,
    /// <summary>
    ///已经是好友了
    /// </summary>
    [pbr::OriginalName("IsFriend")] IsFriend = 441,
    /// <summary>
    ///已经申请过了
    /// </summary>
    [pbr::OriginalName("FriendApplied")] FriendApplied = 442,
    /// <summary>
    ///没有找到玩家
    /// </summary>
    [pbr::OriginalName("NoFoundRole")] NoFoundRole = 443,
    /// <summary>
    ///最大赠送次数
    /// </summary>
    [pbr::OriginalName("MaxSendPowerTimes")] MaxSendPowerTimes = 444,
    /// <summary>
    ///今天已经赠送过
    /// </summary>
    [pbr::OriginalName("TodaySend")] TodaySend = 445,
    /// <summary>
    ///最大领取次数
    /// </summary>
    [pbr::OriginalName("MaxGetPowerTimes")] MaxGetPowerTimes = 446,
    /// <summary>
    /// 目标的 好友申请 数量已经满了
    /// </summary>
    [pbr::OriginalName("TargetBeApplyIsMax")] TargetBeApplyIsMax = 447,
    /// <summary>
    ///对方好友列表已满
    /// </summary>
    [pbr::OriginalName("TargetFriendMaxAmount")] TargetFriendMaxAmount = 448,
    /// <summary>
    ///军团
    /// </summary>
    [pbr::OriginalName("LeagueNameErr")] LeagueNameErr = 450,
    /// <summary>
    ///军团介绍不合法
    /// </summary>
    [pbr::OriginalName("LeagueContext")] LeagueContext = 451,
    /// <summary>
    ///军团名重复
    /// </summary>
    [pbr::OriginalName("LeagueNameRepetition")] LeagueNameRepetition = 452,
    /// <summary>
    ///竞技场
    /// </summary>
    [pbr::OriginalName("ArenaSceneInitError")] ArenaSceneInitError = 460,
    /// <summary>
    ///cdk已经被使用
    /// </summary>
    [pbr::OriginalName("CdkUsed")] CdkUsed = 470,
    /// <summary>
    ///领取失败
    /// </summary>
    [pbr::OriginalName("CdkError")] CdkError = 471,
    /// <summary>
    ///enterScene
    /// </summary>
    [pbr::OriginalName("Other")] Other = 480,
    /// <summary>
    ///重复请求进入场景
    /// </summary>
    [pbr::OriginalName("RepeatEnterScene")] RepeatEnterScene = 481,
    /// <summary>
    ///token为null
    /// </summary>
    [pbr::OriginalName("TokenNull")] TokenNull = 482,
    /// <summary>
    ///TokenError = 483;	//token验证不通过
    /// </summary>
    [pbr::OriginalName("TokenOverdue")] TokenOverdue = 484,
    /// <summary>
    ///战斗服没有玩家数据
    /// </summary>
    [pbr::OriginalName("NoBattleData")] NoBattleData = 485,
    /// <summary>
    ///找不到战斗服务器
    /// </summary>
    [pbr::OriginalName("FightServerUnOnline")] FightServerUnOnline = 486,
    /// <summary>
    ///聊天
    /// </summary>
    [pbr::OriginalName("ChatToLong")] ChatToLong = 550,
    /// <summary>
    ///敏感字
    /// </summary>
    [pbr::OriginalName("ChanMsgError1")] ChanMsgError1 = 551,
    /// <summary>
    ///非法字符
    /// </summary>
    [pbr::OriginalName("ChanMsgError2")] ChanMsgError2 = 552,
    /// <summary>
    /// 匹配操作  560 ~ 579
    /// </summary>
    [pbr::OriginalName("NotInMatch")] NotInMatch = 560,
    /// <summary>
    /// 派遣功能  580 ~ 599
    /// </summary>
    [pbr::OriginalName("NoPatrolTask")] NoPatrolTask = 580,
    /// <summary>
    /// 这个派遣任务已经开始 或者可以领取奖励 或者已经完成了
    /// </summary>
    [pbr::OriginalName("PatrolTaskIsOverStart")] PatrolTaskIsOverStart = 581,
    /// <summary>
    /// 选择的卡 有误，需要重新选择. 已经被使用了，或者没有拥有
    /// </summary>
    [pbr::OriginalName("PatrolTaskUsedCardsError")] PatrolTaskUsedCardsError = 582,
    /// <summary>
    /// 这个任务 还需要时间才能完成
    /// </summary>
    [pbr::OriginalName("PatrolTaskNeedTime")] PatrolTaskNeedTime = 583,
    /// <summary>
    /// 已经领取过 派遣任务的奖励了
    /// </summary>
    [pbr::OriginalName("PatrolTaskAlreadyGetReward")] PatrolTaskAlreadyGetReward = 584,
    /// <summary>
    /// 不满足商店的购买条件
    /// </summary>
    [pbr::OriginalName("PatrolStoreBuyConditionError")] PatrolStoreBuyConditionError = 585,
    /// <summary>
    /// 购买次数 不足
    /// </summary>
    [pbr::OriginalName("PatrolStoreBuyTimesLess")] PatrolStoreBuyTimesLess = 586,
    /// <summary>
    /// 未解锁任何商品， 无法刷新
    /// </summary>
    [pbr::OriginalName("PatrolStoreNothingUnlock")] PatrolStoreNothingUnlock = 587,
    /// <summary>
    /// 刷新次数到达上限， 无法刷新
    /// </summary>
    [pbr::OriginalName("PatrolRefreshTimesReachMax")] PatrolRefreshTimesReachMax = 588,
    /// <summary>
    /// 没有刷新到这个商品， 无法购买
    /// </summary>
    [pbr::OriginalName("PatrolStoreNoTheGoods")] PatrolStoreNoTheGoods = 589,
    /// <summary>
    /// 无法重复 锁定
    /// </summary>
    [pbr::OriginalName("PatrolStoreGoodsAlreadyLock")] PatrolStoreGoodsAlreadyLock = 590,
    /// <summary>
    /// 没有锁定这个商品
    /// </summary>
    [pbr::OriginalName("PatrolStoreGoodsNotLock")] PatrolStoreGoodsNotLock = 591,
    /// <summary>
    /// 酒馆功能   600 ~ 609
    /// </summary>
    [pbr::OriginalName("TavernStrategicsMaxTimes")] TavernStrategicsMaxTimes = 600,
    /// <summary>
    /// 港口功能   610 ~ 629
    /// </summary>
    [pbr::OriginalName("NotFriend")] NotFriend = 610,
    /// <summary>
    /// 没有这个类型的资源
    /// </summary>
    [pbr::OriginalName("HarborDoNotHaveGoods")] HarborDoNotHaveGoods = 611,
    /// <summary>
    /// 拥有的资源数量不够
    /// </summary>
    [pbr::OriginalName("HarborGoodsCountLess")] HarborGoodsCountLess = 612,
    /// <summary>
    /// 船超载
    /// </summary>
    [pbr::OriginalName("HarborCountOverloadBoat")] HarborCountOverloadBoat = 613,
    /// <summary>
    /// 数量大于 好友要收购的数量
    /// </summary>
    [pbr::OriginalName("HarborFriendCountLess")] HarborFriendCountLess = 614,
    /// <summary>
    /// 没有那个船的 皮肤
    /// </summary>
    [pbr::OriginalName("HarborNoTheShipSkin")] HarborNoTheShipSkin = 615,
    /// <summary>
    /// 没有那个出航信息
    /// </summary>
    [pbr::OriginalName("HarborNoTheSail")] HarborNoTheSail = 616,
    /// <summary>
    /// 出航不需要加速
    /// </summary>
    [pbr::OriginalName("HarborSailNoNeedSpeedUp")] HarborSailNoNeedSpeedUp = 617,
    /// <summary>
    /// 出航的时间不足， 无法领取奖励
    /// </summary>
    [pbr::OriginalName("HarborSailTimeLess")] HarborSailTimeLess = 618,
    /// <summary>
    /// 科技 相关的功能  630 ~ 639
    /// </summary>
    [pbr::OriginalName("TechnologyTypeError")] TechnologyTypeError = 630,
    /// <summary>
    /// 科技已经满级了
    /// </summary>
    [pbr::OriginalName("TechnologyMaxLevel")] TechnologyMaxLevel = 631,
    /// <summary>
    /// 条件不足， 无法升级科技
    /// </summary>
    [pbr::OriginalName("TechnologyConditionError")] TechnologyConditionError = 632,
    /// <summary>
    /// 匹配相关的功能    640 ~ 649
    /// </summary>
    [pbr::OriginalName("NoTheCardGroup")] NoTheCardGroup = 640,
    /// <summary>
    /// 没有那个pvp战斗记录的卡组信息
    /// </summary>
    [pbr::OriginalName("MatchPvPRecordNoCardGroupInfo")] MatchPvPrecordNoCardGroupInfo = 641,
    /// <summary>
    /// 特殊任务（佣兵大厅）  650 ~ 659
    /// </summary>
    [pbr::OriginalName("SpecialTaskConfigIdError")] SpecialTaskConfigIdError = 650,
    /// <summary>
    /// 没有接受那个任务
    /// </summary>
    [pbr::OriginalName("SpecialTaskNotAccept")] SpecialTaskNotAccept = 651,
    /// <summary>
    /// 到达了今天可接受任务的上限
    /// </summary>
    [pbr::OriginalName("SpecialTaskTodayMaxAcceptTimes")] SpecialTaskTodayMaxAcceptTimes = 652,
    /// <summary>
    /// 未完成， 无法领取奖励
    /// </summary>
    [pbr::OriginalName("SpecialTaskCannotGetReward")] SpecialTaskCannotGetReward = 653,
    /// <summary>
    /// 该任务已经接受过了
    /// </summary>
    [pbr::OriginalName("SpecialTaskAlreadyAccept")] SpecialTaskAlreadyAccept = 654,
    /// <summary>
    /// 该任务没有超时
    /// </summary>
    [pbr::OriginalName("SpecialTaskNotTimeout")] SpecialTaskNotTimeout = 655,
    /// <summary>
    /// 没有刷新到该任务， 无法操作
    /// </summary>
    [pbr::OriginalName("SpecialTaskNoTheTask")] SpecialTaskNoTheTask = 656,
    /// <summary>
    /// 没有任务可以刷新掉
    /// </summary>
    [pbr::OriginalName("SpecialTaskCannotFlush")] SpecialTaskCannotFlush = 657,
  }

  #endregion

  #region Messages
  public sealed partial class ErrorCodeResponse : pb::IMessage<ErrorCodeResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ErrorCodeResponse> _parser = new pb::MessageParser<ErrorCodeResponse>(() => new ErrorCodeResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ErrorCodeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Errorcode.ErrorcodeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ErrorCodeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ErrorCodeResponse(ErrorCodeResponse other) : this() {
      _hasBits0 = other._hasBits0;
      cmd_ = other.cmd_;
      type_ = other.type_;
      paramInt_ = other.paramInt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ErrorCodeResponse Clone() {
      return new ErrorCodeResponse(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private readonly static int CmdDefaultValue = 0;

    private int cmd_;
    /// <summary>
    ///   cmd 对应 具体的协议号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cmd {
      get { if ((_hasBits0 & 1) != 0) { return cmd_; } else { return CmdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cmd_ = value;
      }
    }
    /// <summary>Gets whether the "cmd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCmd {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cmd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCmd() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static int TypeDefaultValue = 0;

    private int type_;
    /// <summary>
    ///  对应 ErrorCodeType 的值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Type {
      get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "paramInt" field.</summary>
    public const int ParamIntFieldNumber = 3;
    private readonly static int ParamIntDefaultValue = 0;

    private int paramInt_;
    /// <summary>
    /// 保留参数， 暂时没用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ParamInt {
      get { if ((_hasBits0 & 4) != 0) { return paramInt_; } else { return ParamIntDefaultValue; } }
      set {
        _hasBits0 |= 4;
        paramInt_ = value;
      }
    }
    /// <summary>Gets whether the "paramInt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParamInt {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "paramInt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParamInt() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ErrorCodeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ErrorCodeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (Type != other.Type) return false;
      if (ParamInt != other.ParamInt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCmd) hash ^= Cmd.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasParamInt) hash ^= ParamInt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCmd) {
        output.WriteRawTag(8);
        output.WriteInt32(Cmd);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (HasParamInt) {
        output.WriteRawTag(24);
        output.WriteInt32(ParamInt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCmd) {
        output.WriteRawTag(8);
        output.WriteInt32(Cmd);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (HasParamInt) {
        output.WriteRawTag(24);
        output.WriteInt32(ParamInt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCmd) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cmd);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (HasParamInt) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParamInt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ErrorCodeResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasCmd) {
        Cmd = other.Cmd;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasParamInt) {
        ParamInt = other.ParamInt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cmd = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            ParamInt = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Cmd = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            ParamInt = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code

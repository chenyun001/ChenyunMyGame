---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenyun.
--- DateTime: 2022/10/18 15:44
---
local new = typesys.new
local GameObject = CS.UnityEngine.GameObject
local event_system = require "manager/event"
local timer = lua_framework.timer_system
require('services/player_info_services')
---@type PlayerInfoProxy
local role_model = lua_framework.proxy.player_info_proxy
local MainPanel = typesys.def.MainPanel {
    __super = typesys.Panel,
    GameBattle = typesys.__unmanaged,
    step_1 = typesys.__unmanaged,
    Image_role = typesys.__unmanaged,
    step = typesys.__unmanaged,
    obj_steps = typesys.__unmanaged,
    Text_count = typesys.__unmanaged,
    GameClick  = typesys.__unmanaged,
    Text_lianxu = typesys.__unmanaged,
    isJump = false,
    nextStep =  typesys.__unmanaged,
    role = typesys.__unmanaged,
    obj_hp = typesys.__unmanaged,
    hp_list =   typesys.__unmanaged,
}

function MainPanel:awake()
    self.GameBattle =  GameObject.Find('GameBattle'):GetComponent(typeof(CS.GameBattle))
    self.role =  GameObject.Find('role'):GetComponent(typeof(CS.Role))
    self.step_1     =  GameObject.Find('step_1')
    self.obj_steps  =  GameObject.Find('Steps')
    self.Image_role =  GameObject.Find('role')
    self.GameClick  =  self.GameClick.transform:GetComponent(typeof(CS.GameClick))
    self.Text_lianxu = self.Text_lianxu.transform:GetComponent(typeof(UnityEngine.UI.Text))
    self.GameClick:SetCallBackDown(function() 
        -- todo
    end)

    self.GameClick:SetCallBackUp(function() 
        --todo
    end)

    self.GameBattle:SetGameClick(self.GameClick)
    self.role:SetGameClick(self.GameClick)
    self.role:SetGameBattle(self.GameBattle)
    self.GameBattle:SetJumpEnd(function() 
        self:JumpEnd()
    end) 

    self:add_listener(NetWorkEvent.Resoult, function()
        GameUIManager:OpenUI("ResoultPanel.prefab")
        GameUIManager:CloseUI("MainPanel.prefab")
    end)
end

function MainPanel:JumpEnd()
    self.Text_count.text =  self.GameBattle.resoultCount
    self:UpdateHp()
    role_model:set_count(self.GameBattle.resoultCount)
    if self.role.HpValue <= 0 then
        local PlayerInfoService = typesys.new(typesys.PlayerInfoService)
        PlayerInfoService:SendResoult(self.GameBattle.resoultCount)
    end
    
    if self.GameBattle.LianXuStep > 1 then
        self.Text_lianxu.text = "连跳+"..self.GameBattle.LianXuStep-1
        DoTweenBridge.DoTextScale( self.Text_lianxu.gameObject,1.5,1,nil)
    else
        self.Text_lianxu.text  = ""
    end

end

function MainPanel:InitGame()
    self.GameBattle.nowAge = 0
    self.GameBattle.nowMapId = 1
    self.GameBattle.MapLgenth = 3 
    self.GameBattle:SetMapData(1)
    self.GameBattle:CreateMap()
    self.GameBattle:PlayAnimation(function() 
        self.role:GameStartAnimation(function() 
            self.role:SetStepSlect()
            self.role.isGameStart = true
            self:SetRoleHp()
        end)
    end) 
end



function MainPanel:SetRoleHp()
    self.role.HpValue = 5
    self.hp_list = {}
    self.Text_count.text = 0
   
    for i = 1, 10 do
        local obj = self.obj_hp.transform:Find("hp_"..i)
        local hp_bar = obj.transform:Find("hp_bar")
        if i<= self.role.HpValue then
            obj.gameObject:SetActive(true)
            hp_bar.gameObject:SetActive(true)
            self.hp_list[i] = hp_bar
        else
            obj.gameObject:SetActive(false)
        end
    end
end

function MainPanel:UpdateHp()
    for index, value in ipairs(self.hp_list) do
            if index > self.role.HpValue   then
                value.gameObject:SetActive(false)
            end
    end
end

function MainPanel:getMovePosition()
    return self.nextStep.transform.position
end

function MainPanel:GetStep()
    -- todo
end

function MainPanel:resume()
    --self:check_guide()
end



function MainPanel:start()
    
    self:InitGame()
end


function MainPanel:ResSetGame()
    self.role.isGameStart = true
end

function MainPanel:destroy()
    self:release()
end

function MainPanel:update(delta_time)

end

return MainPanel

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Jonny.
--- DateTime: 2021/1/19 18:18
---

-- 自增序列
local time_generate = 0

-- 定时器 VO
---@class TimeHandle
local TimeHandle = typesys.def.TimeHandle {
    id = 1,
    -- 定时器时间
    time = 0,
    -- 重复定时
    repeated = false,
    -- 当前时间
    cur_time = 0,
    -- 触发的函数
    func = typesys.__unmanaged,
    -- 过期的定时器
    is_obsolete = false,
}

function TimeHandle:__ctor(time, func, repeated)
    self.time = time
    self.cur_time = 0
    self.func = func
    self.repeated = repeated or false
    time_generate = time_generate + 1
    self.id = time_generate
    self.is_obsolete = false
end

function TimeHandle:tick(delta_time)
    self.cur_time = self.cur_time + delta_time
    -- 时间到了
    if self.cur_time >= self.time then
        self.cur_time = 0
        if not self.repeated then
            self.is_obsolete = true
        end
        return true
    end

    return false
end
-------------------------

local new = typesys.new

---@class  TimerSystem
local TimerSystem = typesys.def.TimerSystem {
    timers = typesys.array
}

function TimerSystem:__ctor()
    self.timers = new(typesys.array, TimeHandle)
end

---add_timer 新增定时器
---@param time number
---@param func function
---@param repeated boolean
---@return TimeHandle
function TimerSystem:add_timer(time, func, repeated)
    local t = new(TimeHandle, time, func, repeated)
    self.timers:pushBack(t)

    return t
end

---remove_timer 移除定时器y
---@param timer TimeHandle
function TimerSystem:remove_timer(timer)
    timer.is_obsolete = true
end

function TimerSystem:tick(delta_time)
    local times_count = #self.timers
    for index = 1, times_count do
        local timer = self.timers:get(index)
        -- 没有过期
        if not timer.is_obsolete then
            -- 时间到了
            if timer:tick(delta_time) then
                timer.func()
            end
        end
    end
end

return TimerSystem
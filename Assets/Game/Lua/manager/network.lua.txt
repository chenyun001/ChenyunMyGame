---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Jonny.
--- DateTime: 2021/1/11 14:43
---

network = {}
local net_queue = {}
local pb = require "pb"
local event_system = require "manager/event"
local game_events = require "module/game_events"
local pd = require("proto_dic")
local socket = require "ext/luasocket/socket"

network.events = {
    -- 连接成功
    ["connected"] = "connected",
}

-- 协议处理监听
-- @proto_id 协议号
-- @callback 处理函数
function network.add_network_callback(proto_id, callback)
    event_system:add_listener(Convert.ToInt32(proto_id), callback)
end

-- 协议处理监听取消
-- @proto_id 协议号
-- @callback 处理函数
function network.remove_network_callback(proto_id, callback)
    event_system:remove_listener(Convert.ToInt32(proto_id), callback)
end

-- 派发消息到相关处理函数
-- @msg 处理完的协议体
-- msg.proto = 协议的类名全路径
-- msg.proto_id = 协议号
local function dispatch_network(msg)
    event_system:dispatch(msg.proto_id, msg)
    if (msg.proto_id < 5000) then
        table.remove_arrays(net_queue, msg.proto_id)
        print('-----------------------')
        print(net_queue)
    end
end

---init_network_pb 从 C#中读取 PB 文件 传值给 Lua 初始化
---@param pb_file userdata pb 文件内容
function network.init_network_pb(pb_file)
    assert(pb.load(pb_file), "load pb error.")

end

---connect 连接服务器
---@param address string IP地址
---@param port number 端口号
function network.connect(address, port)
    --address = "127.0.0.1"
    --port = 20000
    print("connect " .. address .. ":" .. tostring(port))
    MailingJoy.Core.NetManager.Instance:Connect(address, port)

    --local c = socket.connect4(address, port)
    --if c == nil then
    --    print("socket 连接失败!")
    --else
    --    network.socket = c
    --    -- 连接成功回调
    --    network.connected_success_lua()
    --end
end

function network.log_out()
    --address = "127.0.0.1"
    --port = 20000
    MailingJoy.Core.NetManager.Instance:LogOut()

    --local c = socket.connect4(address, port)
    --if c == nil then
    --    print("socket 连接失败!")
    --else
    --    network.socket = c
    --    -- 连接成功回调
    --    network.connected_success_lua()
    --end
end

function network.connected_success_lua()
    -- 已连接 flag
    network.is_connected = true
    event_system:dispatch(network.events.connected)
    event_system:dispatch(game_events.start_heart)
    print("connected to service succeed !!!!")

    while true do
        local recvt, sendt, status = network.socket.select(
                { network.socket }, nil, 1)
        while #recvt > 0 do
            local response, receive_status = network.socket:receive()
            if receive_status ~= "closed" then
                if response then
                    print(response)
                    recvt, sendt, status = socket.select({ network.socket }, nil, 1)
                end
            else
                break
            end
        end
    end
end

function network.connected_success()
    event_system:dispatch(network.events.connected)
    event_system:dispatch(game_events.start_heart)
    print("connected to service succeed!")
end

---on_receive 收到Socket信息 处理函数
---@param proto_id number 协议号
---@param byte_body string 消息体 字节数组
---@param len number 长度
function network.on_receive(proto_id, byte_body, len)
    local proto_type = pd:get_proto_type(proto_id)

    if proto_type == nil then
        event_system:dispatch(proto_id)
        return
    end
    print(proto_id .. "解析" .. proto_type)

   

    local p = pb.decode(proto_type, byte_body)
    if (proto_type == "proto.errorcode.ErrorCodeResponse") then
        if (p.type ~=0 ) then
            p.is_error_message = true
            MessageTips.Show(language_data.GetLanguage("errorcode:" .. p.type))
            if (p.msg~=nil) then
                print("服务器出错:"..p.msg)
            end
        end
    end
    p.proto_id = proto_id
    if proto_id == Convert.ToInt32(PushCmd.ErrorCode) then
        proto_id = p.cmd
        p.is_error_message = true
        p.proto_id = p.cmd
        if (p.type ~= 0) then
            MessageTips.Show(language_data.GetLanguage("errorcode:" .. p.type))
        end
    else

        p.is_error_message = false
    end
    dispatch_network(p)
end

---send 从 Lua发送socket事件
---@param proto_id number
---@param body table 消息参数体
function network.send(proto_id, body)
    local p_id = Convert.ToInt32(proto_id)

    local proto = assert(pb.encode(body.proto, body))
    MailingJoy.Core.NetManager.Instance:Send(p_id, proto)

    table.insert(net_queue, p_id)
end

function network.send_empty(proto_id)
    local p_id = Convert.ToInt32(proto_id)

    MailingJoy.Core.NetManager.Instance:SendEmpty(p_id)

end


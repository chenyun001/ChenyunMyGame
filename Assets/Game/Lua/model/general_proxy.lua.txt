---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Jonny.
--- DateTime: 2021/2/1 16:56
---

require("model/data/GeneralInfo")
local new = typesys.new

---@class GeneralProxy
local GeneralProxy = typesys.def.GeneralProxy {

    general_list = typesys.map,
    general_array = typesys.array,
    general_vocation1 = typesys.array,
    general_vocation2 = typesys.array,
    general_vocation3 = typesys.array,


    active_list = typesys.array,
    deck_list = typesys.__unmanaged,
    skill_list = typesys.__unmanaged,
    skill_All_list = typesys.__unmanaged,
    select_type   = typesys.__unmanaged,
    hero_select_type = typesys.__unmanaged,
}

function GeneralProxy:__ctor(...)

    ---@type map
    self:init()

end
function GeneralProxy:init()
    -- self.general_list = new(typesys.map, type(1), typesys.GeneralInfo)
    -- ---@type array
    -- self.general_array = new(typesys.array, typesys.GeneralInfo, true)
    -- ---@type array
    -- self.active_list = new(typesys.array, typesys.GeneralInfo, true)

    -- self.general_vocation1 = new(typesys.array, typesys.GeneralInfo, true)
    -- self.general_vocation2 = new(typesys.array, typesys.GeneralInfo, true)
    -- self.general_vocation3 = new(typesys.array, typesys.GeneralInfo, true)
    -- self.skill_All_list = {}

    
end

---@return GeneralInfo
function GeneralProxy:get_general(id)
    return self.general_list:get(id)
end

function GeneralProxy:get_vocation(type)
    if (type == 1) then
        return self.general_vocation1
    elseif (type == 2) then
        return self.general_vocation2
    else
        return self.general_vocation3
    end


end

---@param list proto.general.GeneralListRequestAndResponse
function GeneralProxy:set_active_list(list)

    for i, v in ipairs(list) do
        if (self.general_list:containKey(v.typeId)) then
            ---@type GeneralInfo
            local general = self.general_list:get(v.typeId)
            if (general:isActive()==false) then
                self.active_list:pushBack(self.general_list:get(v.typeId))
            end
            general:set_data(v)
          
        else
            print("缺少" .. v.generalId)
        end
    end
end

function GeneralProxy:set_skill_all_list()
    local list = commanderSkill:get_commanderSkill_dic()
    self.skill_All_list = {}
    for i,v in pairs(list) do
        local item = {}
        item.typeId = v.itemId
        item.is_active  = false
        item.config = v
        item.value = 0
        table.insert(self.skill_All_list,item)
    end

   
end

function GeneralProxy:Get_skill_list_by_type(type)
    self.select_type = type
    if type == -1 then
        return self.skill_All_list
    end

    local list = {}
    for i,v in ipairs(self.skill_All_list) do
        if v.config.category == type then
            table.insert(list,v)
        end
    end
    return list
end

function GeneralProxy:set_skill_list(list)
    
    if (list == nil) then
        list = {}
    end

    if (self.skill_list == nil) then
        self.skill_list = {}
    end

    for i, v in ipairs(list) do
        if not (table.contain_value(self.skill_list, v.typeId)) then
            table.insert(self.skill_list, v.typeId)
        end
    end

    local function _CheckIs(typeId)
        for i,v in pairs(self.skill_list) do
            if v ==  typeId then
                return true
            end
        end
        return false
    end

    for i,v in ipairs(self.skill_All_list) do
        v.is_active  = _CheckIs(v.typeId)
    end

    local function _Sortfunction(a,b)  
        if a.is_active then
           a.value = 1
        end
        if b.is_active then
            b.value = 1
        end
        return a.value > b.value
    end

    table.sort(self.skill_All_list, _Sortfunction)
end

function GeneralProxy:get_skill_list()
    if (self.skill_list == nil) then
        self.skill_list = {}
    end
    return self.skill_list
end

---@param msg proto.general.GeneralActivateRequestAndResponse
function GeneralProxy:set_active(msg)

    local general = self:get_general(msg.generalId)
    general:set_data(msg.info)
    self.active_list:pushBack(general)
end

---@param msg proto.general.GeneralLevelUpRequestAndResponse
function GeneralProxy:general_level_up(msg)
    local general = self:get_general(msg.generalId)
    general:up_level(msg)

end
---@param msg proto.general.GeneralUpStarRequestAndResponse
function GeneralProxy:general_star_up(msg)

    local general = self:get_general(msg.generalId)
    general:up_star(msg)

end

function GeneralProxy:get_active_list()

    local t = {}

    for i = 1, self.active_list:size() do

        table.insert(t, self.active_list[i])
    end

    return t
end

function GeneralProxy:get_show_list()
    return self.general_array
end

function GeneralProxy:clear()

    self.general_list:clear()
    ---@type array
    self.general_array:clear()
    self.active_list:clear()
    self.general_vocation1:clear()
    self.general_vocation2:clear()
    self.general_vocation3:clear()
    self.deck_list = {}
    self.skill_list = {}
    self.skill_All_list = {}
    self:init()
end

function GeneralProxy:set_deck(id, deck)
    local msg = {}
    msg.proto = "proto.cardGroup.AddUpdateCardGroupRequest"
    msg.cardGroupInfo = {}
    msg.cardGroupInfo.typeId = id
    msg.cardGroupInfo.generalTypeIds = deck.generalTypeIds
    msg.cardGroupInfo.skillCardTypeId = deck.skillCardTypeId
    msg.cardGroupInfo.commanderTypeId = 9001
    network.send(EchoCmd.AddUpdateCardGroup, msg)
    self.deck_list[id] = deck
end

function GeneralProxy:add_general_to_deck(deckId, generalId)
    local deck = self:get_deck(deckId)
    if (deck.generalTypeIds == nil) then
        deck.generalTypeIds = {}
    end
    table.insert(deck.generalTypeIds, generalId)
    self:set_deck(deckId, deck)
end
function GeneralProxy:add_skill_to_deck(deckId, generalId)
    local deck = self:get_deck(deckId)
    if (deck.skillCardTypeId == nil) then
        deck.skillCardTypeId = {}
    else
        if (table.contain_value(deck.skillCardTypeId, generalId)) then
            return
        end
    end
    table.insert(deck.skillCardTypeId, generalId)
    self:set_deck(deckId, deck)
end

function GeneralProxy:get_deck(id)
    if (self.deck_list[id] == nil) then
        local t = {}
        self.deck_list[id] = t
        if (id == 1) then
            t.generalTypeIds = { }
        else
            t.generalTypeIds = {}
        end
        return t
    end
    return self.deck_list[id]
end

function GeneralProxy:save_deck(msg)

    if (msg.cardGroupInfos == nil) then
        if (msg.typeId ~= nil) then
            self.deck_list[msg.typeId] = msg
        end
        return
    end
    
    for i, v in ipairs(msg.cardGroupInfos) do
        self.deck_list[v.typeId] = v

    end


end
return GeneralProxy